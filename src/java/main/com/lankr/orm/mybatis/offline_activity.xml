<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lankr.orm.mybatis.mapper.OfflineActivityMapper">
	<resultMap type="offlineActivity" id="offlineActivityMapper"
		extends="base.baseModel">
		<result property="status" column="status" />
		<result property="name" column="name" />
		<result property="pinyin" column="pinyin" />
		<result property="description" column="description" />
		<result property="bookStartDate" column="bookStartDate" />
		<result property="bookEndDate" column="bookEndDate" />
		<result property="address" column="address" />
		<result property="enrollType" column="enrollType" />
		<result property="limitNum" column="limitNum" />
		<result property="cover" column="cover" />
		<result property="price" column="price" />
		<association property="initiatorUser" column="initiatorId"
			select="user.getUserById" />
	</resultMap>

	<insert id="addOfflineActivity" parameterType="offlineActivity">
		insert into offline_activity
		(uuid,createDate,modifyDate,status,isActive,mark,name,pinyin,description,bookStartDate,bookEndDate,address,enrollType,limitNum,cover,price)
		values
		(#{uuid},NOW(),NOW(),#{status},#{isActive},#{mark},#{name},#{pinyin},#{description},#{bookStartDate},#{bookEndDate},#{address},#{enrollType},#{limitNum},#{cover},#{price})
		<selectKey keyProperty="id" resultType="int">
			SELECT
			LAST_INSERT_ID() as value
		</selectKey>
	</insert>

	<select id="getofflineActivityById" parameterType="int"
		resultMap="offlineActivityMapper">
		select *
		from offline_activity where
		isActive=1 and uuid=#{0}
	</select>

	<select id="getofflineActivityByUuid" parameterType="string"
		resultMap="offlineActivityMapper">
		select *
		from offline_activity where
		isActive=1 and uuid=#{0}
	</select>

	<select id="searchPaginationOfflineActivity" resultMap="offlineActivityMapper">
		select *
		from
		offline_activity where isActive = 1 and (name like
		"%"#{searchValue}"%"
		or pinyin
		like
		"%"#{searchValue}"%") order by
		modifyDate desc limit #{from},#{size}
	</select>

	<update id="updateOfflineActivityStatus" parameterType="offlineActivity">
		UPDATE
		offline_activity set
		modifyDate=NOW(),status=#{status}
		where id=#{id}
	</update>

	<update id="updateOfflineActivity" parameterType="offlineActivity">
		UPDATE
		offline_activity set
		modifyDate=NOW(),name=#{name},pinyin=#{pinyin},description=#{description},bookStartDate=#{bookStartDate},
		bookEndDate=#{bookEndDate},mark=#{mark},address=#{address},enrollType=#{enrollType},limitNum=#{limitNum},
		cover=#{cover},price=#{price}
		where id=#{id}
	</update>

	<update id="bindInitatorUser" parameterType="offlineActivity">
		UPDATE
		offline_activity set modifyDate=NOW(),initiatorId=#{initiatorUser.id}
		where id=#{id};
	</update>

	<select id="wxOfflineActivityList" resultMap="offlineActivityMapper">
		select * from
		offline_activity where
		isActive=1 and status=1 and createDate
		&lt;#{startTime} order by
		createDate desc
		limit #{size}
	</select>

	<select id="webOfflineActivityList" resultMap="offlineActivityMapper">
		select * from
		offline_activity where
		isActive=1 and status=1 order by
		createDate desc
		limit #{from},#{size}
	</select>

	<select id="bookLineActivityOfUserList" resultMap="offlineActivityMapper">
		select off.*
		from
		offline_activity off left join
		(select distinct sign.referId from
		signup_user sign where sign.isActive=1 and
		sign.referType=1 and
		sign.status=#{status} and sign.userId=#{userId}) sign_refer
		on
		off.id=sign_refer.referId where sign_refer.referId is not null and
		off.isActive=1 and off.status =1
		and
		off.createDate
		&lt;#{startTime} order by
		off.createDate desc
		limit #{size}
	</select>



</mapper>